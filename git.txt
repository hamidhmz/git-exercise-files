//if we want to know version of git
git --varsion

// if you whant to know what is user name and email in gitbash
cat .gitconfig

//if you want help
git help

//for start project and create repository we must be go on goal directory and type this command
git init

//for commit first we must add that file that have git init
git add ./

//then we must commit with optional message
git commit -m "initial commit(optional message)"

// when you wanna find out who and when commit is trigge
git log 
//you chan add number of latest log to show  you
git log -n1
git log -n2
git log -n0
//if you want to show you latest log since specific time
git log --since=2012-10-01
//if you want to show you latest log until specific time
git log --until=2015-10-01
//if you wanna to show you log of specific user
git log --author="hamidhmz"
//you can also use regx
git log --grep="init"

//for know what is to commit
git status

//if we whant to know what is change in file before add
git diff
//you can just tell what file you mean
git diff git.txt
//if you want to know what is added to staged section 
git diff --staged
//if you want to see just what is change blew command can show you
git diff --color-words

//if you wanna delete a file you have two option for that 1 you can just delete that and add ./ and commit 2 you just write blow command
git rm file.txt

//for move or rename or both one file you can just do it on visual or do it with git like this (in unix)
git mv file.txt file1.txt
git mv file.txt directory/file.txt

//if you edit your project and save it and before add to git you wanna rollback to previous edits
git checkout -- index.html

//if you edit your project and add to stage now you wanna roll back to working directory 
git reset HEAD index.html

//if you want change your latest commit ... your add that change and when you wannna commit that you must instead write this
git commit --amend -m "again change"

//if you want go back to optional head and reset all edit till where you want(this number is section of that head that you wanna back there) this just translate from repository to stage //35
git reset --soft 1664846121321325
//it will be same as soft one plus it instead of bring change to stage index  ,  bring change to working directory //35
git reset --mixed 1664846121321325
//or
git reset 1664846121321325
//this will be same of soft and mixed but it don't go to stage or working directory it just reset back and remove all new changes //36
git reset --hard 1664846121321325

//this is just for file which is unuseless files and tell you for premission for delete //37
git clean -n
//this is just for delete file which are unuseless files //37
git clean -f




