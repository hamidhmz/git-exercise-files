git pull 
git commit -am "<your message >"
git push <alias>





//if we want to know version of git
git --varsion

// if you whant to know what is user name and email in gitbash
cat .gitconfig

//if you want help
git help

//for start project and create repository we must be go on goal directory and type this command
git init

//for commit first we must add that file that have git init
git add ./
//add all file even Untracked
git add -A

//then we must commit with optional message
git commit -m "initial commit(optional message)"

// when you wanna find out who and when commit is trigge
git log 
//you chan add number of latest log to show  you
git log -n1
git log -n2
git log -n0
//if you want to show you latest log since specific time
git log --since=2012-10-01
//if you want to show you latest log since specific time //45
git log --after=2012-10-01
//if you want to show you latest log until specific time
git log --until=2015-10-01
//if you want to show you latest log until specific time //45
git log --before=2015-10-01
//if you wanna to show you log of specific user
git log --author="hamidhmz"
//you can also use regx
git log --grep="init"
//if you wanna see at one line //45
git log --oneline
//if you wanna see just 3 of that logs //45
git log --oneline -3
//you can just see from specific hash to another one //45
git log fejiwjfeo..fijeiwjii --oneline
//if you wanna see with details //45
git log -p
//and you have several option //45
git log --format=oneline
git log --format=short
git log --format=medium
git log --format=full
git log --format=fuller
git log --format=raw
git log --graph

//for know what is to commit
git status

//if we whant to know what is change in file before add //47
git diff
git diff fefwwfwe..qtrgres
git diff fefwwfwe..HEAD
git diff --stat --summary 1515166 HEAD
//you can just tell what file you mean
git diff git.txt
//if you want to know what is added to staged section 
git diff --staged
//if you want to see just what is change blew command can show you
git diff --color-words
//git show is like git diff but it is complater and it just for one commit //47
git show fiejwofwj
//you can go to previouses brunch or tree //47
git show fowjeijojio HEAD~2

//if you wanna delete a file you have two option for that 1 you can just delete that and add ./ and commit 2 you just write blow command
git rm file.txt

//for move or rename or both one file you can just do it on visual or do it with git like this (in unix)
git mv file.txt file1.txt
git mv file.txt directory/file.txt

//if you edit your project and save it and before add to git you wanna rollback to previous edits
git checkout -- index.html

//if you edit your project and add to stage now you wanna roll back to working directory 
git reset HEAD index.html

//if you want change your latest commit ... your add that change and when you wannna commit that you must instead write this
git commit --amend -m "again change"

//if you want go back to optional head and reset all edit till where you want(this number is section of that head that you wanna back there) this just translate from repository to stage //35
git reset --soft 1664846121321325
//it will be same as soft one plus it instead of bring change to stage index  ,  bring change to working directory //35
git reset --mixed 1664846121321325
//or
git reset 1664846121321325
//this will be same of soft and mixed but it don't go to stage or working directory it just reset back and remove all new changes //36
git reset --hard 1664846121321325

//this is just for file which is unuseless files and tell you for premission for delete //37
git clean -n
//this is just for delete file which are unuseless files //37
git clean -f

//git ignore e.g //38
/node_modules
/public/hot
/public/storage
/storage/*.key
/vendor
/.idea
/.vagrant
Homestead.json
Homestead.yaml
npm-debug.log
yarn-error.log
.env
* ? [aeuio] [0-9]
*.php
//if you wanna write comment you can use # //39
#some thing
//go to https://gitignore.io //39
//if you wanna git ignore one file which exist in repository before you must delete that from repository //41

//if you wanna add new directory without any content you must add .gitkeep to it for commit to repository //42

//if you wanna see current tree //43 44
git ls-tree master
git ls-tree HEAD

//if you wanna see previous tree(parent) //43 44
git ls-tree master^
git ls-tree master~
git ls-tree HEAD^
git ls-tree HEAD~1

//if you wanna see double previous tree(grandparent) //43 44
git ls-tree master^^
git ls-tree master~2
git ls-tree HEAD~2


////branch////
//if you wanna see what is your branch //49
git branch
//if you wanna create new branch //49
git branch new_branch
//if you wanna switch to new branch which you made it before //50
git checkout new_branch
//if you wanna know in log every where is every branch and you wanna see where is HEAD //51
git log --graph --oneline --decorate --all
//you can find different between 2 branch //53
git diff master..new_branch
//if you wanna know data in new_branch is exist in data in other branch //53
git branch --merged
//if you wanna edit your branch name //54
git branch --move old_name new_name
//or 
git branch -m old_name new_name
//if you wanna delete the branch /55
git branch --delete branch_name
//or 
git branch -d branch_name
//if you wanna equel to branch you must merge it //57
git merge new_branch
//if you have conflict problem //59
git merge --abort
//if you wanna checkout to other branch but you have edit in working directory and you must be commit but you don't wanna commit that so you must stash it //61
git stash save "this is message of stash"
//if you wanna see stash list //61 62
git stash list
//if you wanna see changes of specific stash  //61 62
git stash show stash@{0}
//if you wanna see more details //63 64
git stash show -p stash@{0}
//if you wanna overhoul all stash to current branch and delete all stash from warehouse //63 64
git stash pop
//if you wanna overhoul one specific stash to current branch and delete that stash from warehouse //63 64 65
git stash pop stash@{0}
//if you wanna delete some stash //63 64 65
git stash drop stash@{0}
//if you wanna delete all stash //65
git stash clear

//if you wanna see your project remote alias //67
git remote
//if you wanna add url remote //67
git remote add <alias> <url>
//if you wanna see remote push and fetch //67
git remote -v
//if you wanna remove your remote //68
git remote rm <alias>
//when you wanna push to remote master //68
git push -u origin-git master
//have 2 remote source 
git remote add github https://github.com/Company_Name/repository_name.git

//if you wanna see online branch //69
git branch -r
//if you wanna see all branch (online and offline) //69
git branch -a

//if you wanna get a project from some url you must clone it //69
git clone <url>
//if you have same name in that directory which you wanna donload project you must edit project name //69
git clone <url> <new name>

//if you wanna add branch to remote without tracking //70
git push origin-git new_branch
//if you wanna track the branch which add to remove in before //71
git branch --track <branch_name> <alias>/<branch_name>

//if you wanna fetch to origin/master(this is not your project file) //71
git fetch <alias>
//if you wanna see log for origin/master (this is not your project file) //73
git log --oneline -5 <alias>/master
//if you wanna see log for master (this is your project file) //73
git log --oneline -5 master


